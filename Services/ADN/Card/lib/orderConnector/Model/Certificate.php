<?php
/**
 * Certificate
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Plasticard\PLZFT
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * ADN/leifos - OpenAPI 3.0
 *
 * Definition of the REST API for ADN/leifos
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: developer@plasticard.de
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Plasticard\PLZFT\Model;

use \ArrayAccess;
use \Plasticard\PLZFT\ObjectSerializer;

/**
 * Certificate Class Doc Comment
 *
 * @category Class
 * @description Certificate definition
 * @package  Plasticard\PLZFT
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Certificate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Certificate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'certificate_id' => 'string',
        'certificate_number' => 'string',
        'lastname' => 'string',
        'firstname' => 'string',
        'nationality' => 'string',
        'birthday' => '\DateTime',
        'issued_by' => 'string',
        'valid_until' => '\DateTime',
        'certificate_types' => 'string[]',
        'photo' => 'string',
        'postal_address' => '\Plasticard\PLZFT\Model\PostalAddress',
        'return_address' => '\Plasticard\PLZFT\Model\ReturnAddress'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'certificate_id' => null,
        'certificate_number' => null,
        'lastname' => null,
        'firstname' => 'string',
        'nationality' => null,
        'birthday' => 'date',
        'issued_by' => null,
        'valid_until' => 'date',
        'certificate_types' => null,
        'photo' => null,
        'postal_address' => null,
        'return_address' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'certificate_id' => false,
		'certificate_number' => false,
		'lastname' => false,
		'firstname' => false,
		'nationality' => false,
		'birthday' => false,
		'issued_by' => false,
		'valid_until' => false,
		'certificate_types' => false,
		'photo' => false,
		'postal_address' => false,
		'return_address' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'certificate_id' => 'CertificateId',
        'certificate_number' => 'CertificateNumber',
        'lastname' => 'Lastname',
        'firstname' => 'Firstname',
        'nationality' => 'Nationality',
        'birthday' => 'Birthday',
        'issued_by' => 'IssuedBy',
        'valid_until' => 'ValidUntil',
        'certificate_types' => 'CertificateTypes',
        'photo' => 'Photo',
        'postal_address' => 'PostalAddress',
        'return_address' => 'ReturnAddress'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'certificate_id' => 'setCertificateId',
        'certificate_number' => 'setCertificateNumber',
        'lastname' => 'setLastname',
        'firstname' => 'setFirstname',
        'nationality' => 'setNationality',
        'birthday' => 'setBirthday',
        'issued_by' => 'setIssuedBy',
        'valid_until' => 'setValidUntil',
        'certificate_types' => 'setCertificateTypes',
        'photo' => 'setPhoto',
        'postal_address' => 'setPostalAddress',
        'return_address' => 'setReturnAddress'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'certificate_id' => 'getCertificateId',
        'certificate_number' => 'getCertificateNumber',
        'lastname' => 'getLastname',
        'firstname' => 'getFirstname',
        'nationality' => 'getNationality',
        'birthday' => 'getBirthday',
        'issued_by' => 'getIssuedBy',
        'valid_until' => 'getValidUntil',
        'certificate_types' => 'getCertificateTypes',
        'photo' => 'getPhoto',
        'postal_address' => 'getPostalAddress',
        'return_address' => 'getReturnAddress'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('certificate_id', $data ?? [], null);
        $this->setIfExists('certificate_number', $data ?? [], null);
        $this->setIfExists('lastname', $data ?? [], null);
        $this->setIfExists('firstname', $data ?? [], null);
        $this->setIfExists('nationality', $data ?? [], null);
        $this->setIfExists('birthday', $data ?? [], null);
        $this->setIfExists('issued_by', $data ?? [], null);
        $this->setIfExists('valid_until', $data ?? [], null);
        $this->setIfExists('certificate_types', $data ?? [], null);
        $this->setIfExists('photo', $data ?? [], null);
        $this->setIfExists('postal_address', $data ?? [], null);
        $this->setIfExists('return_address', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['certificate_types'] === null) {
            $invalidProperties[] = "'certificate_types' can't be null";
        }
        if ((count($this->container['certificate_types']) > 4)) {
            $invalidProperties[] = "invalid value for 'certificate_types', number of items must be less than or equal to 4.";
        }

        if ((count($this->container['certificate_types']) < 1)) {
            $invalidProperties[] = "invalid value for 'certificate_types', number of items must be greater than or equal to 1.";
        }

        if ($this->container['postal_address'] === null) {
            $invalidProperties[] = "'postal_address' can't be null";
        }
        if ($this->container['return_address'] === null) {
            $invalidProperties[] = "'return_address' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets certificate_id
     *
     * @return string|null
     */
    public function getCertificateId()
    {
        return $this->container['certificate_id'];
    }

    /**
     * Sets certificate_id
     *
     * @param string|null $certificate_id certificate_id
     *
     * @return self
     */
    public function setCertificateId($certificate_id)
    {
        if (is_null($certificate_id)) {
            throw new \InvalidArgumentException('non-nullable certificate_id cannot be null');
        }
        $this->container['certificate_id'] = $certificate_id;

        return $this;
    }

    /**
     * Gets certificate_number
     *
     * @return string|null
     */
    public function getCertificateNumber()
    {
        return $this->container['certificate_number'];
    }

    /**
     * Sets certificate_number
     *
     * @param string|null $certificate_number certificate_number
     *
     * @return self
     */
    public function setCertificateNumber($certificate_number)
    {
        if (is_null($certificate_number)) {
            throw new \InvalidArgumentException('non-nullable certificate_number cannot be null');
        }
        $this->container['certificate_number'] = $certificate_number;

        return $this;
    }

    /**
     * Gets lastname
     *
     * @return string|null
     */
    public function getLastname()
    {
        return $this->container['lastname'];
    }

    /**
     * Sets lastname
     *
     * @param string|null $lastname lastname
     *
     * @return self
     */
    public function setLastname($lastname)
    {
        if (is_null($lastname)) {
            throw new \InvalidArgumentException('non-nullable lastname cannot be null');
        }
        $this->container['lastname'] = $lastname;

        return $this;
    }

    /**
     * Gets firstname
     *
     * @return string|null
     */
    public function getFirstname()
    {
        return $this->container['firstname'];
    }

    /**
     * Sets firstname
     *
     * @param string|null $firstname firstname
     *
     * @return self
     */
    public function setFirstname($firstname)
    {
        if (is_null($firstname)) {
            throw new \InvalidArgumentException('non-nullable firstname cannot be null');
        }
        $this->container['firstname'] = $firstname;

        return $this;
    }

    /**
     * Gets nationality
     *
     * @return string|null
     */
    public function getNationality()
    {
        return $this->container['nationality'];
    }

    /**
     * Sets nationality
     *
     * @param string|null $nationality nationality
     *
     * @return self
     */
    public function setNationality($nationality)
    {
        if (is_null($nationality)) {
            throw new \InvalidArgumentException('non-nullable nationality cannot be null');
        }
        $this->container['nationality'] = $nationality;

        return $this;
    }

    /**
     * Gets birthday
     *
     * @return \DateTime|null
     */
    public function getBirthday()
    {
        return $this->container['birthday'];
    }

    /**
     * Sets birthday
     *
     * @param \DateTime|null $birthday birthday
     *
     * @return self
     */
    public function setBirthday($birthday)
    {
        if (is_null($birthday)) {
            throw new \InvalidArgumentException('non-nullable birthday cannot be null');
        }
        $this->container['birthday'] = $birthday;

        return $this;
    }

    /**
     * Gets issued_by
     *
     * @return string|null
     */
    public function getIssuedBy()
    {
        return $this->container['issued_by'];
    }

    /**
     * Sets issued_by
     *
     * @param string|null $issued_by issued_by
     *
     * @return self
     */
    public function setIssuedBy($issued_by)
    {
        if (is_null($issued_by)) {
            throw new \InvalidArgumentException('non-nullable issued_by cannot be null');
        }
        $this->container['issued_by'] = $issued_by;

        return $this;
    }

    /**
     * Gets valid_until
     *
     * @return \DateTime|null
     */
    public function getValidUntil()
    {
        return $this->container['valid_until'];
    }

    /**
     * Sets valid_until
     *
     * @param \DateTime|null $valid_until valid_until
     *
     * @return self
     */
    public function setValidUntil($valid_until)
    {
        if (is_null($valid_until)) {
            throw new \InvalidArgumentException('non-nullable valid_until cannot be null');
        }
        $this->container['valid_until'] = $valid_until;

        return $this;
    }

    /**
     * Gets certificate_types
     *
     * @return string[]
     */
    public function getCertificateTypes()
    {
        return $this->container['certificate_types'];
    }

    /**
     * Sets certificate_types
     *
     * @param string[] $certificate_types Array of CertificateType
     *
     * @return self
     */
    public function setCertificateTypes($certificate_types)
    {
        if (is_null($certificate_types)) {
            throw new \InvalidArgumentException('non-nullable certificate_types cannot be null');
        }

        if ((count($certificate_types) > 4)) {
            throw new \InvalidArgumentException('invalid value for $certificate_types when calling Certificate., number of items must be less than or equal to 4.');
        }
        if ((count($certificate_types) < 1)) {
            throw new \InvalidArgumentException('invalid length for $certificate_types when calling Certificate., number of items must be greater than or equal to 1.');
        }
        $this->container['certificate_types'] = $certificate_types;

        return $this;
    }

    /**
     * Gets photo
     *
     * @return string|null
     */
    public function getPhoto()
    {
        return $this->container['photo'];
    }

    /**
     * Sets photo
     *
     * @param string|null $photo photo
     *
     * @return self
     */
    public function setPhoto($photo)
    {
        if (is_null($photo)) {
            throw new \InvalidArgumentException('non-nullable photo cannot be null');
        }
        $this->container['photo'] = $photo;

        return $this;
    }

    /**
     * Gets postal_address
     *
     * @return \Plasticard\PLZFT\Model\PostalAddress
     */
    public function getPostalAddress()
    {
        return $this->container['postal_address'];
    }

    /**
     * Sets postal_address
     *
     * @param \Plasticard\PLZFT\Model\PostalAddress $postal_address postal_address
     *
     * @return self
     */
    public function setPostalAddress($postal_address)
    {
        if (is_null($postal_address)) {
            throw new \InvalidArgumentException('non-nullable postal_address cannot be null');
        }
        $this->container['postal_address'] = $postal_address;

        return $this;
    }

    /**
     * Gets return_address
     *
     * @return \Plasticard\PLZFT\Model\ReturnAddress
     */
    public function getReturnAddress()
    {
        return $this->container['return_address'];
    }

    /**
     * Sets return_address
     *
     * @param \Plasticard\PLZFT\Model\ReturnAddress $return_address return_address
     *
     * @return self
     */
    public function setReturnAddress($return_address)
    {
        if (is_null($return_address)) {
            throw new \InvalidArgumentException('non-nullable return_address cannot be null');
        }
        $this->container['return_address'] = $return_address;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


